#
# Copyright Broadcom Inc. (2018)
#

#########################
## Toolchain variables ##
#########################
# Suppress target recipe prints by default
Q ?= @
# Default compiler
CROSS_COMPILE ?= /projects/ccxsw/toolchains/gcc-arm-none-eabi-6-2017-q2-update/bin/arm-none-eabi-
CC=$(CROSS_COMPILE)gcc
AR=$(CROSS_COMPILE)ar
AS=$(CROSS_COMPILE)as
LD=$(CROSS_COMPILE)ld
OBJDUMP=$(CROSS_COMPILE)objdump
OBJCOPY=$(CROSS_COMPILE)objcopy
MKDIR=mkdir
CP=cp
CD=cd

CWD = $(shell pwd)
MPOS_BASE = $(shell cd ../../ && pwd)
TOPDIR = $(MPOS_BASE)
COMMON = $(TOPDIR)/sbis/common
TOOLS_PATH = $(MPOS_BASE)/sbis/tools
BUILDDIR = $(MPOS_BASE)/sbis/build

COMPILE_BY = $(shell whoami | sed 's/\\/\\\\/')
COMPILE_HOST = $(shell hostname)

BOARD = citadel_svk_58201
CONFIG_RTOS = no_os
CONFIG_ARM_CORE_MMU ?= y

###############
## Functions ##
###############
# Function to export variable
define export_var
export $(1)
endef
# Function to add a define to CFLAGS
define add_def_flag
ifneq ($(2), n)
	CFLAGS += -D$(1)=$(2)
endif
endef

####################
## Compiler flags ##
####################
# Arch specific compile flags
CFLAGS += -DCONFIG_ARM -DCONFIG_ARMV7 -DCONFIG_CPU_CORTEX_A
ARCH_FLAGS += -march=armv7-a -mtune=cortex-a7 -mthumb
# VFP flags
ARCH_FLAGS += -mfpu=neon-vfpv4 -mfloat-abi=hard

# Enable FPU
CFLAGS += -DCONFIG_FPU_ENABLED

# Build timestamp related defines
CFLAGS += -DLINUX_COMPILE_BY='"$(COMPILE_BY)"'
CFLAGS += -DLINUX_COMPILE_HOST='"$(COMPILE_HOST)"'
CFLAGS += -DLINUX_COMPILER='"$(shell $(CC) -v 2>&1 | tail -n 1)"'
CFLAGS += -DSBI_DATE='"$(shell date +"%b %d %C%y")"'
CFLAGS += -DSBI_TIME='"$(shell date +"%T")"'

# Other configuration compiler flags
CFLAGS += -DCONFIG_RTOS='"$(CONFIG_RTOS)"'
ifeq ($(CONFIG_ARM_CORE_MMU), y)
CFLAGS += -DCONFIG_ARM_CORE_MMU
endif

# Include paths
CFLAGS += -I$(COMMON)/include
CFLAGS += -I$(MPOS_BASE)/include
CFLAGS += -I$(MPOS_BASE)/include/zephyr/broadcom
CFLAGS += -I$(MPOS_BASE)/include/broadcom/drivers
CFLAGS += -I$(MPOS_BASE)/include/zephyr/
CFLAGS += -I$(MPOS_BASE)/include/osal/
CFLAGS += -I$(MPOS_BASE)/include/zephyr/broadcom/arch/arm
CFLAGS += -I$(MPOS_BASE)/boards/$(BOARD)
CFLAGS += -I$(MPOS_BASE)/drivers/broadcom

CFLAGS += -Wall -Wextra -g -Os $(ARCH_FLAGS) -DCONFIG_LYNX

# Permitted warnings
CFLAGS += -Wno-unused-variable -Wno-unused-label -Wno-unused-function
CFLAGS += -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-format

# Set default app entry symbol name
CFLAGS += -Dapp_main=sbi_main

########################################
### Memory offsets and image header sizes needed by linker scripts
CFLAGS += -DSRAM_START=0x24000000
CFLAGS += -DSRAM_SIZE=0x100000
CFLAGS += -DFLASH_START=0x63000000
CFLAGS += -DDEF_TOC_SIZE=0x400

# The SBI header size depends on the signing algorithm. Note that this could
# change based on the number of keys in the chain used to sign the image.
CFLAGS += -DSBI_HEADER_SIZE_HMACSHA=0x40
CFLAGS += -DSBI_HEADER_SIZE_RSA2K=0x360
CFLAGS += -DSBI_HEADER_SIZE_RSA4K=0x12B0
CFLAGS += -DSBI_HEADER_SIZE_AES=0x50

# The SBL loads the USB boot image at this address to SRAM and then validates
# ToC header=then conditionally the SBI header and then jumps to the SBI image
# located at the end of the SBI header (which for an RSA 2K signed image is
# 0x2400D360 -> 0x2400CC00 + 0x400 + 0x360)
CFLAGS += -DLE_IMAGE_START=0x2400CC00
CFLAGS += -DDEF_SBI_HEADER_START=LE_IMAGE_START+DEF_TOC_SIZE
CFLAGS += -DDEF_SBI_BIN_START_RSA2K=DEF_SBI_HEADER_START+SBI_HEADER_SIZE_RSA2K
CFLAGS += -DDEF_SBI_BIN_START_RSA4K=DEF_SBI_HEADER_START+SBI_HEADER_SIZE_RSA4K
CFLAGS += -DDEF_SBI_BIN_START_HMAC=DEF_SBI_HEADER_START+SBI_HEADER_SIZE_HMACSHA
CFLAGS += -DDEF_SBI_BIN_START_AES=DEF_SBI_HEADER_START+SBI_HEADER_SIZE_AES

# For Secure boot (2-stage) Demo and Secure XIP Demo, the AAI starts at an
# offset of 0x30000 in the flash, providing 192 KB for the S2BL or secure_xip
# SBI image. If these image do not fit in that space, then this offset ought to
# be increased
CFLAGS += -DDEF_AAI_IMAGE_OFFSET=0x30000

# Stage 2 boot loader memory usage. This is used by the stage 2 boot loader
# linker script to determine the memory layout. And by the sample aai linker
# script to determine the address to link to.
DEF_S2BL_SIZE = 0x20000
###
########################################

##################
## Linker flags ##
##################
LIBGCC_D = $(shell dirname `${CC} $(ARCH_FLAGS) -print-libgcc-file-name`)
LIBC_D = $(shell dirname `${CC} $(ARCH_FLAGS) -print-file-name=libc.a`)
LDFLAGS += -L$(LIBC_D) -lc -L$(LIBGCC_D) -lgcc -lnosys
LDFLAGS += --entry=_start -T $(BUILDDIR)/$(TARGET).ld -Map=$(BUILDDIR)/$(TARGET).map

## Export variables for sub makes
$(foreach V,$(sort $(.VARIABLES)), $(if $(findstring CONFIG_,$(V)), $(eval $(call export_var,$(V)))))
export CC CFLAGS LD MPOS_BASE BUILDDIR Q MAKEOPTS AS AR CP CD MKDIR OBJCOPY OBJDUMP

COMMON_DRIVER_DEPS = console serial interrupt_controller timer
COMMON_BRCM_DRIVER_DEPS = pinmux clock_control smau

DRIVER_DEPS = $(addprefix $(MPOS_BASE)/drivers/, $(COMMON_DRIVER_DEPS))
DRIVER_DEPS += $(addprefix $(MPOS_BASE)/drivers/broadcom/, $(COMMON_BRCM_DRIVER_DEPS))

SUBDIRS = $(TOPDIR)/arch \
          $(TOPDIR)/os \
          $(TOPDIR)/osal \
          $(TOPDIR)/sbis/common \
          $(DRIVER_DEPS)
