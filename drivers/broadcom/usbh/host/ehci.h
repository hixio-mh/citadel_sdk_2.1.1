/******************************************************************************
 *  Copyright (C) 2018 Broadcom. The term "Broadcom" refers to Broadcom Limited
 *  and/or its subsidiaries.
 *
 *  This program is the proprietary software of Broadcom and/or its licensors,
 *  and may only be used, duplicated, modified or distributed pursuant to the
 *  terms and conditions of a separate, written license agreement executed
 *  between you and Broadcom (an "Authorized License").  Except as set forth in
 *  an Authorized License, Broadcom grants no license (express or implied),
 *  right to use, or waiver of any kind with respect to the Software, and
 *  Broadcom expressly reserves all rights in and to the Software and all
 *  intellectual property rights therein.  IF YOU HAVE NO AUTHORIZED LICENSE,
 *  THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY, AND SHOULD
 *  IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE SOFTWARE.
 *
 *  Except as expressly set forth in the Authorized License,
 *
 *  1.	 This program, including its structure, sequence and organization,
 *  constitutes the valuable trade secrets of Broadcom, and you shall use all
 *  reasonable efforts to protect the confidentiality thereof, and to use this
 *  information only in connection with your use of Broadcom integrated circuit
 *  products.
 *
 *  2.	 TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED
 *  "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS
 *  OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH
 *  RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL
 *  IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A
 *  PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET
 *  ENJOYMENT, QUIET POSSESSION OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE
 *  ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 *
 *  3.	 TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM OR
 *  ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL,
 *  INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY
 *  RELATING TO YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM
 *  HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN
 *  EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
 *  WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY
 *  FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.
 ******************************************************************************/

#ifndef _EHCI_H_
#define _EHCI_H_

#define REG8_RSVD(start, end)	\
	u8_t rsvd_##start[(end - start) / sizeof(u8_t)]
#define REG16_RSVD(start, end)	\
	u16_t rsvd_##start[(end - start) / sizeof(u16_t)]
#define REG32_RSVD(start, end)	\
	u32_t rsvd_##start[(end - start) / sizeof(u32_t)]

#define EHCI_USE_STATIC_MEM_ALLOC 1
/*
 *  Configuration defines
 */

/*transfer upto 20480 bytes */
#define EHCI_MAX_LEN_PER_BUF	(4096)
#define EHCI_MAX_LEN_PER_QTD	(EHCI_MAX_LEN_PER_BUF * 5) /* 20kb */

#define EHCI_MAX_NUM_EPT_PER_PORT	(4)
#define EHCI_MAX_NUM_TD_PER_XFER	(3)

#define EHCI_RESET_DELAY_MS		(1)
#define EHCI_POWER_UP_RETRY		(2000)
#define EHCI_ENABLE_RETRY		(2000)
#define EHCI_RESET_RETRY		(2000)

#define EHCI_EP_ALIGN			(32)
#define EHCI_QH_ALIGN			(32)
#define EHCI_QTD_ALIGN			(32)
#define EHCI_FL_ALIGN			(0x1000) /* 4k aligned */
#define EHCI_ITD_ALIGN			(32)

/* Hw default: 1K periodic list heads, one per frame.
 * periodic_size can change by USBCMD only if hccparams allows.
 * lynx does not allow
 */
#define FRAME_LIST_ELEMENT_1024		(0 << 2)
#define FRAME_LIST_ELEMENT_512		(1 << 2)
#define FRAME_LIST_ELEMENT_256		(1 << 3)

#define FRAMELIST_SIZE_BITS_0		0 /*1024 */
#define FRAMELIST_SIZE_BITS_1		1 /*512 */
#define FRAMELIST_SIZE_BITS_2		2 /*256 */
#define FRAME_LIST_SIZE	(1024 >> FRAMELIST_SIZE_BITS_0)	/* 1kb */

/* #define SMC_ENABLED */
#ifdef SMC_ENABLED	/*if external RAM enabled */
#define EHCI_MAX_NUM_ITD		128	/* 8kb */
#else
#define EHCI_MAX_NUM_ITD		64	/* 4kb */
#endif

/*
 * Error code defines
 */
#define EHCI_ERR_NOERROR		0
#define EHCI_ERR_CRC			1
#define EHCI_ERR_BITSTUFFING		2
#define EHCI_ERR_DATATOGGLEMISMATCH	3
#define EHCI_ERR_STALL			4
#define EHCI_ERR_DEVICENOTRESPONDING	5
#define EHCI_ERR_PIDCHECKFAILURE	6
#define EHCI_ERR_UNEXPECTEDPID		7
#define EHCI_ERR_DATAOVERRUN		8
#define EHCI_ERR_DATAUNDERRUN		9
#define EHCI_ERR_BUFFEROVERRUN		12
#define EHCI_ERR_BUFFERUNDERRUN		13
#define EHCI_ERR_NOTACCESSED		15
#define EHCI_ERR_CANCELLED		0xFF

/*
 *  Macros to muck with bitfields
 */

#define _EHCI_MAKE32(x) ((u32_t)(x))

/*
 * Make a mask for 1 bit at position 'n'
 */

#define _EHCI_MAKEMASK1(n) (_EHCI_MAKE32(1) << _EHCI_MAKE32(n))

/*
 * Make a mask for 'v' bits at position 'n'
 */

#define _EHCI_MAKEMASK(v, n) \
	(_EHCI_MAKE32((_EHCI_MAKE32(1)<<(v))-1) << _EHCI_MAKE32(n))

/*
 * Make a value at 'v' at bit position 'n'
 */

#define _EHCI_MAKEVALUE(v, n) (_EHCI_MAKE32(v) << _EHCI_MAKE32(n))
#define _EHCI_GETVALUE(v, n, m) \
	((_EHCI_MAKE32(v) & _EHCI_MAKE32(m)) >> _EHCI_MAKE32(n))

/*
 *  Registers
 */
#define USB_EHCI_BASE			(u32_t)0x46000000
#define USB_HOST_BASE_ADDRESS		USB_EHCI_BASE

#define _EHCI_REGIDX(x)	((x)*4)

/* Host Controller Capability Registers */

#define R_EHCI_HCCAPBASE		_EHCI_REGIDX(0)
#define R_EHCI_HCSPARAMS		_EHCI_REGIDX(1)
#define R_EHCI_HCCPARAMS		_EHCI_REGIDX(2)

/* Host Controller Operational Registers */
#define R_EHCI_USBCMD			_EHCI_REGIDX(4)
#define R_EHCI_USBSTS			_EHCI_REGIDX(5)
#define R_EHCI_USBINTR			_EHCI_REGIDX(6)
#define R_EHCI_FRINDEX			_EHCI_REGIDX(7)
#define R_EHCI_CTRLDSSEGMENT		_EHCI_REGIDX(8)
#define R_EHCI_PERIODICLISTBASE		_EHCI_REGIDX(9)
#define R_EHCI_ASYNCLISTADDR		_EHCI_REGIDX(10)

#define R_EHCI_CONFIGFLAG		_EHCI_REGIDX(20)
#define R_EHCI_PORTSC_0			_EHCI_REGIDX(21)
#define R_EHCI_PORTSC_1			_EHCI_REGIDX(22)
#define R_EHCI_PORTSC_2			_EHCI_REGIDX(23)
#define R_EHCI_PORTSC			(R_EHCI_PORTSC_0)
#define R_EHCI_PORTSCx(x)		R_EHCI_PORTSC_0	/*note: 1-based */

#define R_EHCI_INSNREG00		_EHCI_REGIDX(36)
#define R_EHCI_INSNREG01		_EHCI_REGIDX(37)
#define R_EHCI_INSNREG02		_EHCI_REGIDX(38)
#define R_EHCI_INSNREG03		_EHCI_REGIDX(39)
#define R_EHCI_INSNREG04		_EHCI_REGIDX(40)
#define R_EHCI_INSNREG05		_EHCI_REGIDX(41)
#define R_EHCI_INSNREG06		_EHCI_REGIDX(42)
#define R_EHCI_INSNREG07		_EHCI_REGIDX(43)
#define R_EHCI_INSNREG08		_EHCI_REGIDX(44)

/*
 * R_EHCI_HCCAPBASE
 */
#define S_EHCI_HCIVERSION		(16)
#define L_EHCI_HCIVERSION		(16)
#define M_EHCI_HCIVERSION \
	_EHCI_MAKEMASK(L_EHCI_HCIVERSION, S_EHCI_HCIVERSION)
#define V_EHCI_HCIVERSION(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_HCIVERSION)
#define G_EHCI_HCIVERSION(x) \
	_EHCI_GETVALUE(x, S_EHCI_HCIVERSION, M_EHCI_HCIVERSION)

#define S_EHCI_CAPLENGTH		(0)
#define L_EHCI_CAPLENGTH		(8)
#define M_EHCI_CAPLENGTH \
	_EHCI_MAKEMASK(L_EHCI_CAPLENGTH, S_EHCI_CAPLENGTH)
#define V_EHCI_CAPLENGTH(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_CAPLENGTH)
#define G_EHCI_CAPLENGTH(x) \
	_EHCI_GETVALUE(x, S_EHCI_CAPLENGTH, M_EHCI_CAPLENGTH)

/*
 * R_EHCI_HCCPARAMS
 */
#define S_EHCI_LPM_CAPABLE		(17)
#define L_EHCI_LPM_CAPABLE		(1)
#define M_EHCI_LPM_CAPABLE \
	_EHCI_MAKEMASK(L_EHCI_LPM_CAPABLE, S_EHCI_LPM_CAPABLE)
#define V_EHCI_LPM_CAPABLE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_LPM_CAPABLE)
#define G_EHCI_LPM_CAPABLE(x) \
	_EHCI_GETVALUE(x, S_EHCI_LPM_CAPABLE, M_EHCI_LPM_CAPABLE)

/*
 * R_EHCI_USBCMD
 */
#define S_EHCI_LPM_HIRD				(24)
#define L_EHCI_LPM_HIRD				(4)
#define M_EHCI_LPM_HIRD \
	_EHCI_MAKEMASK(L_EHCI_LPM_HIRD, S_EHCI_LPM_HIRD)
#define V_EHCI_LPM_HIRD(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_LPM_HIRD)
#define G_EHCI_LPM_HIRD(x) \
	_EHCI_GETVALUE(x, S_EHCI_LPM_HIRD, M_EHCI_LPM_HIRD)

#define INTERRUPT_THRESHOLD_CONTROL_1UFRAME	(1)
#define INTERRUPT_THRESHOLD_CONTROL_2UFRAME	(2)
#define INTERRUPT_THRESHOLD_CONTROL_4UFRAME	(4)
#define INTERRUPT_THRESHOLD_CONTROL_8UFRAME	(8)
#define INTERRUPT_THRESHOLD_CONTROL_16UFRAME	(10)
#define INTERRUPT_THRESHOLD_CONTROL_32UFRAME	(20)
#define INTERRUPT_THRESHOLD_CONTROL_64UFRAME	(40)

#define S_EHCI_INTERRUPT_THRESHOLD_CONTROL	(16)
#define L_EHCI_INTERRUPT_THRESHOLD_CONTROL \
	(INTERRUPT_THRESHOLD_CONTROL_8UFRAME)
#define M_EHCI_INTERRUPT_THRESHOLD_CONTROL \
	_EHCI_MAKEMASK(L_EHCI_INTERRUPT_THRESHOLD_CONTROL, \
	S_EHCI_INTERRUPT_THRESHOLD_CONTROL)
#define V_EHCI_INTERRUPT_THRESHOLD_CONTROL(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_INTERRUPT_THRESHOLD_CONTROL)
#define G_EHCI_INTERRUPT_THRESHOLD_CONTROL(x) \
	_EHCI_GETVALUE(x, S_EHCI_INTERRUPT_THRESHOLD_CONTROL, \
	M_EHCI_INTERRUPT_THRESHOLD_CONTROL)

#define S_EHCI_ASYNCHRONOUS_SCHEDULE_PARK_MODE_ENABLE	(11)	/*OPTIONAL */
#define L_EHCI_ASYNCHRONOUS_SCHEDULE_PARK_MODE_ENABLE	(1)
#define M_EHCI_ASYNCHRONOUS_SCHEDULE_PARK_MODE_ENABLE \
	_EHCI_MAKEMASK(L_EHCI_ASYNCHRONOUS_SCHEDULE_PARK_MODE_ENABLE, \
	S_EHCI_ASYNCHRONOUS_SCHEDULE_PARK_MODE_ENABLE)
#define V_EHCI_ASYNCHRONOUS_SCHEDULE_PARK_MODE_ENABLE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_ASYNCHRONOUS_SCHEDULE_PARK_MODE_ENABLE)
#define G_EHCI_ASYNCHRONOUS_SCHEDULE_PARK_MODE_ENABLE(x) \
	_EHCI_GETVALUE(x, S_EHCI_ASYNCHRONOUS_SCHEDULE_PARK_MODE_ENABLE, \
	M_EHCI_ASYNCHRONOUS_SCHEDULE_PARK_MODE_ENABLE)

#define S_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_DOORBELL	(6)
#define L_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_DOORBELL	(1)
#define M_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_DOORBELL \
	_EHCI_MAKEMASK(L_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_DOORBELL, \
	S_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_DOORBELL)
#define V_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_DOORBELL(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_DOORBELL)
#define G_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_DOORBELL(x) \
	_EHCI_GETVALUE(x, S_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_DOORBELL, \
	M_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_DOORBELL)

#define S_EHCI_ASYNCHRONOUS_SCHEDULE_ENABLE		(5)
#define L_EHCI_ASYNCHRONOUS_SCHEDULE_ENABLE		(1)
#define M_EHCI_ASYNCHRONOUS_SCHEDULE_ENABLE \
	EHCI_MAKEMASK(L_EHCI_ASYNCHRONOUS_SCHEDULE_ENABLE, \
	S_EHCI_ASYNCHRONOUS_SCHEDULE_ENABLE)
#define V_EHCI_ASYNCHRONOUS_SCHEDULE_ENABLE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_ASYNCHRONOUS_SCHEDULE_ENABLE)
#define G_EHCI_ASYNCHRONOUS_SCHEDULE_ENABLE(x) \
	_EHCI_GETVALUE(x, S_EHCI_ASYNCHRONOUS_SCHEDULE_ENABLE, \
	M_EHCI_ASYNCHRONOUS_SCHEDULE_ENABLE)

#define S_EHCI_PERIODIC_SCHEDULE_ENABLE			(4)
#define L_EHCI_PERIODIC_SCHEDULE_ENABLE			(1)
#define M_EHCI_PERIODIC_SCHEDULE_ENABLE \
	_EHCI_MAKEMASK(L_EHCI_PERIODIC_SCHEDULE_ENABLE, \
	S_EHCI_PERIODIC_SCHEDULE_ENABLE)
#define V_EHCI_PERIODIC_SCHEDULE_ENABLE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_PERIODIC_SCHEDULE_ENABLE)
#define G_EHCI_PERIODIC_SCHEDULE_ENABLE(x) \
	_EHCI_GETVALUE(x, S_EHCI_PERIODIC_SCHEDULE_ENABLE, \
	M_EHCI_PERIODIC_SCHEDULE_ENABLE)

#define S_EHCI_FRAME_LIST_SIZE		(2)
#define L_EHCI_FRAME_LIST_SIZE		(2)
#define M_EHCI_FRAME_LIST_SIZE \
	_EHCI_MAKEMASK(L_EHCI_FRAME_LIST_SIZE, S_EHCI_FRAME_LIST_SIZE)
#define V_EHCI_FRAME_LIST_SIZE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_FRAME_LIST_SIZE)
#define G_EHCI_FRAME_LIST_SIZE(x) \
	_EHCI_GETVALUE(x, S_EHCI_FRAME_LIST_SIZE, M_EHCI_FRAME_LIST_SIZE)

#define S_EHCI_HOST_CONTROLLER_RESET	(1)
#define L_EHCI_HOST_CONTROLLER_RESET	(1)
#define M_EHCI_HOST_CONTROLLER_RESET \
	_EHCI_MAKEMASK(L_EHCI_HOST_CONTROLLER_RESET, \
	S_EHCI_HOST_CONTROLLER_RESET)
#define V_EHCI_HOST_CONTROLLER_RESET(x)	\
	_EHCI_MAKEVALUE(x, S_EHCI_HOST_CONTROLLER_RESET)
#define G_EHCI_HOST_CONTROLLER_RESET(x) \
	_EHCI_GETVALUE(x, S_EHCI_HOST_CONTROLLER_RESET, \
	M_EHCI_HOST_CONTROLLER_RESET)

#define S_EHCI_RUN_STOP		(0)
#define L_EHCI_RUN_STOP		(1)
#define M_EHCI_RUN_STOP	\
	_EHCI_MAKEMASK(L_EHCI_RUN_STOP, S_EHCI_RUN_STOP)
#define V_EHCI_RUN_STOP(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_RUN_STOP)
#define G_EHCI_RUN_STOP(x) \
	_EHCI_GETVALUE(x, S_EHCI_RUN_STOP, M_EHCI_RUN_STOP)

/*
 * R_EHCI_USBSTS
 */
#define S_EHCI_ASYNCHRONOUS_SCHEDULE_STATUS	(15)
#define L_EHCI_ASYNCHRONOUS_SCHEDULE_STATUS	(1)
#define M_EHCI_ASYNCHRONOUS_SCHEDULE_STATUS \
	_EHCI_MAKEMASK(L_EHCI_ASYNCHRONOUS_SCHEDULE_STATUS, \
	S_EHCI_ASYNCHRONOUS_SCHEDULE_STATUS)
#define V_EHCI_ASYNCHRONOUS_SCHEDULE_STATUS(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_ASYNCHRONOUS_SCHEDULE_STATUS)
#define G_EHCI_ASYNCHRONOUS_SCHEDULE_STATUS(x) \
	_EHCI_GETVALUE(x, S_EHCI_ASYNCHRONOUS_SCHEDULE_STATUS, \
	M_EHCI_ASYNCHRONOUS_SCHEDULE_STATUS)

#define S_EHCI_PERIODIC_SCHEDULE_STATUS		(14)
#define L_EHCI_PERIODIC_SCHEDULE_STATUS		(1)
#define M_EHCI_PERIODIC_SCHEDULE_STATUS \
	_EHCI_MAKEMASK(L_EHCI_PERIODIC_SCHEDULE_STATUS, \
	 S_EHCI_PERIODIC_SCHEDULE_STATUS)
#define V_EHCI_PERIODIC_SCHEDULE_STATUS(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_PERIODIC_SCHEDULE_STATUS)
#define G_EHCI_PERIODIC_SCHEDULE_STATUS(x) \
	_EHCI_GETVALUE(x, S_EHCI_PERIODIC_SCHEDULE_STATUS, \
	M_EHCI_PERIODIC_SCHEDULE_STATUS)

#define S_EHCI_RECLAMATION	(13)
#define L_EHCI_RECLAMATION	(1)
#define M_EHCI_RECLAMATION \
	_EHCI_MAKEMASK(L_EHCI_RECLAMATION, S_EHCI_RECLAMATION)
#define V_EHCI_RECLAMATION(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_RECLAMATION)
#define G_EHCI_RECLAMATION(x) \
	_EHCI_GETVALUE(x, S_EHCI_RECLAMATION, M_EHCI_RECLAMATION)

#define S_EHCI_HC_HALTED	(12)
#define L_EHCI_HC_HALTED	(1)
#define M_EHCI_HC_HALTED	\
	_EHCI_MAKEMASK(L_EHCI_HC_HALTED, S_EHCI_HC_HALTED)
#define V_EHCI_HC_HALTED(x)	_EHCI_MAKEVALUE(x, S_EHCI_HC_HALTED)
#define G_EHCI_HC_HALTED(x) \
	_EHCI_GETVALUE(x, S_EHCI_HC_HALTED, M_EHCI_HC_HALTED)

#define S_EHCI_INTERRUPT_ON_ASYNC_ADVANCE	(5)
#define L_EHCI_INTERRUPT_ON_ASYNC_ADVANCE	(1)
#define M_EHCI_INTERRUPT_ON_ASYNC_ADVANCE \
	_EHCI_MAKEMASK(L_EHCI_INTERRUPT_ON_ASYNC_ADVANCE, \
	S_EHCI_INTERRUPT_ON_ASYNC_ADVANCE)
#define V_EHCI_INTERRUPT_ON_ASYNC_ADVANCE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_INTERRUPT_ON_ASYNC_ADVANCE)
#define G_EHCI_INTERRUPT_ON_ASYNC_ADVANCE(x) \
	_EHCI_GETVALUE(x, S_EHCI_INTERRUPT_ON_ASYNC_ADVANCE, \
	M_EHCI_INTERRUPT_ON_ASYNC_ADVANCE)

#define S_EHCI_HOST_SYSTEM_ERROR		(4)
#define L_EHCI_HOST_SYSTEM_ERROR		(1)
#define M_EHCI_HOST_SYSTEM_ERROR \
	_EHCI_MAKEMASK(L_EHCI_HOST_SYSTEM_ERROR, S_EHCI_HOST_SYSTEM_ERROR)
#define V_EHCI_HOST_SYSTEM_ERROR(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_HOST_SYSTEM_ERROR)
#define G_EHCI_HOST_SYSTEM_ERROR(x) \
	_EHCI_GETVALUE(x, S_EHCI_HOST_SYSTEM_ERROR, M_EHCI_HOST_SYSTEM_ERROR)

#define S_EHCI_FRAME_LIST_ROLLOVER		(3)
#define L_EHCI_FRAME_LIST_ROLLOVER		(1)
#define M_EHCI_FRAME_LIST_ROLLOVER \
	_EHCI_MAKEMASK(L_EHCI_FRAME_LIST_ROLLOVER, S_EHCI_FRAME_LIST_ROLLOVER)
#define V_EHCI_FRAME_LIST_ROLLOVER(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_FRAME_LIST_ROLLOVER)
#define G_EHCI_FRAME_LIST_ROLLOVER(x) \
	_EHCI_GETVALUE(x, S_EHCI_FRAME_LIST_ROLLOVER, \
	M_EHCI_FRAME_LIST_ROLLOVER)

#define S_EHCI_PORT_CHANGE_DETECT		(2)
#define L_EHCI_PORT_CHANGE_DETECT		(1)
#define M_EHCI_PORT_CHANGE_DETECT \
	_EHCI_MAKEMASK(L_EHCI_PORT_CHANGE_DETECT, S_EHCI_PORT_CHANGE_DETECT)
#define V_EHCI_PORT_CHANGE_DETECT(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_PORT_CHANGE_DETECT)
#define G_EHCI_PORT_CHANGE_DETECT(x) \
	_EHCI_GETVALUE(x, S_EHCI_PORT_CHANGE_DETECT, M_EHCI_PORT_CHANGE_DETECT)

#define S_EHCI_USB_ERROR_INTERRUPT	(1)
#define L_EHCI_USB_ERROR_INTERRUPT	(1)
#define M_EHCI_USB_ERROR_INTERRUPT \
	_EHCI_MAKEMASK(L_EHCI_USB_ERROR_INTERRUPT, S_EHCI_USB_ERROR_INTERRUPT)
#define V_EHCI_USB_ERROR_INTERRUPT(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_USB_ERROR_INTERRUPT)
#define G_EHCI_USB_ERROR_INTERRUPT(x) \
	_EHCI_GETVALUE(x, S_EHCI_USB_ERROR_INTERRUPT, \
	M_EHCI_USB_ERROR_INTERRUPT)

#define S_EHCI_USB_INTERRUPT		(0)
#define L_EHCI_USB_INTERRUPT		(1)
#define M_EHCI_USB_INTERRUPT \
	_EHCI_MAKEMASK(L_EHCI_USB_INTERRUPT, S_EHCI_USB_INTERRUPT)
#define V_EHCI_USB_INTERRUPT(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_USB_INTERRUPT)
#define G_EHCI_USB_INTERRUPT(x)	\
	_EHCI_GETVALUE(x, S_EHCI_USB_INTERRUPT, M_EHCI_USB_ERROR_INTERRUPT)

/*
 *R_EHCI_USBINTR
 */
#define S_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_ENABLE	(5)
#define L_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_ENABLE	(1)
#define M_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_ENABLE \
	_EHCI_MAKEMASK(L_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_ENABLE, \
	S_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_ENABLE)
#define V_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_ENABLE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_ENABLE)
#define G_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_ENABLE(x) \
	_EHCI_GETVALUE(x, S_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_ENABLE, \
	M_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_ENABLE)

#define S_EHCI_HOST_SYSTEM_ERROR_ENABLE		(4)
#define L_EHCI_HOST_SYSTEM_ERROR_ENABLE		(1)
#define M_EHCI_HOST_SYSTEM_ERROR_ENABLE	 \
	_EHCI_MAKEMASK(L_EHCI_HOST_SYSTEM_ERROR_ENABLE, \
	S_EHCI_HOST_SYSTEM_ERROR_ENABLE)
#define V_EHCI_HOST_SYSTEM_ERROR_ENABLE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_HOST_SYSTEM_ERROR_ENABLE)
#define G_EHCI_HOST_SYSTEM_ERROR_ENABLE(x) \
	_EHCI_GETVALUE(x, S_EHCI_HOST_SYSTEM_ERROR_ENABLE, \
	M_EHCI_HOST_SYSTEM_ERROR_ENABLE)

#define S_EHCI_FRAME_LIST_ROLLOVER_ENABLE	(3)
#define L_EHCI_FRAME_LIST_ROLLOVER_ENABLE	(1)
#define M_EHCI_FRAME_LIST_ROLLOVER_ENABLE \
	_EHCI_MAKEMASK(L_EHCI_FRAME_LIST_ROLLOVER_ENABLE, \
	S_EHCI_FRAME_LIST_ROLLOVER_ENABLE)
#define V_EHCI_FRAME_LIST_ROLLOVER_ENABLE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_FRAME_LIST_ROLLOVER_ENABLE)
#define G_EHCI_FRAME_LIST_ROLLOVER_ENABLE(x) \
	_EHCI_GETVALUE(x, S_EHCI_FRAME_LIST_ROLLOVER_ENABLE, \
	M_EHCI_FRAME_LIST_ROLLOVER_ENABLE)

#define S_EHCI_PORT_CHANGE_INTERRUPT_ENABLE	(2)
#define L_EHCI_PORT_CHANGE_INTERRUPT_ENABLE	(1)
#define M_EHCI_PORT_CHANGE_INTERRUPT_ENABLE \
	_EHCI_MAKEMASK(L_EHCI_PORT_CHANGE_INTERRUPT_ENABLE, \
	S_EHCI_PORT_CHANGE_INTERRUPT_ENABLE)
#define V_EHCI_PORT_CHANGE_INTERRUPT_ENABLE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_PORT_CHANGE_INTERRUPT_ENABLE)
#define G_EHCI_PORT_CHANGE_INTERRUPT_ENABLE(x) \
	_EHCI_GETVALUE(x, S_EHCI_PORT_CHANGE_INTERRUPT_ENABLE, \
	M_EHCI_PORT_CHANGE_INTERRUPT_ENABLE)

#define S_EHCI_USB_ERROR_INTERRUPT_ENABLE	(1)
#define L_EHCI_USB_ERROR_INTERRUPT_ENABLE	(1)
#define M_EHCI_USB_ERROR_INTERRUPT_ENABLE \
	_EHCI_MAKEMASK(L_EHCI_USB_ERROR_INTERRUPT_ENABLE, \
	S_EHCI_USB_ERROR_INTERRUPT_ENABLE)
#define V_EHCI_USB_ERROR_INTERRUPT_ENABLE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_USB_ERROR_INTERRUPT_ENABLE)
#define G_EHCI_USB_ERROR_INTERRUPT_ENABLE(x) \
	_EHCI_GETVALUE(x, S_EHCI_USB_ERROR_INTERRUPT_ENABLE, \
	M_EHCI_USB_ERROR_INTERRUPT_ENABLE)

#define S_EHCI_USB_INTERRUPT_ENABLE		(0)
#define L_EHCI_USB_INTERRUPT_ENABLE		(1)
#define M_EHCI_USB_INTERRUPT_ENABLE \
	_EHCI_MAKEMASK(L_EHCI_USB_INTERRUPT_ENABLE, \
	S_EHCI_USB_INTERRUPT_ENABLE)
#define V_EHCI_USB_INTERRUPT_ENABLE(x)	\
	_EHCI_MAKEVALUE(x, S_EHCI_USB_INTERRUPT_ENABLE)
#define G_EHCI_USB_INTERRUPT_ENABLE(x)	\
	_EHCI_GETVALUE(x, S_EHCI_USB_INTERRUPT_ENABLE, \
	M_EHCI_USB_INTERRUPT_ENABLE)

#define M_EHCI_INTERRUPT_ALL	(M_EHCI_INTERRUPT_ON_ASYNC_ADVANCE_ENABLE | \
			M_EHCI_HOST_SYSTEM_ERROR_ENABLE		| \
			M_EHCI_FRAME_LIST_ROLLOVER_ENABLE	| \
			M_EHCI_USB_ERROR_INTERRUPT_ENABLE	| \
			M_EHCI_USB_INTERRUPT_ENABLE)

/*
 * R_EHCI_ASYNCLISTADDR
 */
#define S_EHCI_LINK_POINTER_LOW	(5)
#define L_EHCI_LINK_POINTER_LOW	(27)
#define M_EHCI_LINK_POINTER_LOW	\
	_EHCI_MAKEMASK(L_EHCI_LINK_POINTER_LOW, S_EHCI_LINK_POINTER_LOW)
#define V_EHCI_LINK_POINTER_LOW(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_LINK_POINTER_LOW)
#define G_EHCI_LINK_POINTER_LOW(x) \
	_EHCI_GETVALUE(x, S_EHCI_LINK_POINTER_LOW, M_EHCI_LINK_POINTER_LOW)

/*
 * R_EHCI_CONFIGFLAG
 */
#define S_EHCI_CONFIGURE_FLAG	(0)
#define L_EHCI_CONFIGURE_FLAG	(1)
#define M_EHCI_CONFIGURE_FLAG \
	_EHCI_MAKEMASK(L_EHCI_CONFIGURE_FLAG, S_EHCI_CONFIGURE_FLAG)
#define V_EHCI_CONFIGURE_FLAG(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_CONFIGURE_FLAG)
#define G_EHCI_CONFIGURE_FLAG(x) \
	_EHCI_GETVALUE(x, S_EHCI_CONFIGURE_FLAG, M_EHCI_CONFIGURE_FLAG)

/*
 * R_EHCI_PORTSC_x
 */
#define S_EHCI_SUSPEND_DEVICE_ADDRESS	(25)
#define L_EHCI_SUSPEND_DEVICE_ADDRESS	(7)
#define M_EHCI_SUSPEND_DEVICE_ADDRESS \
	_EHCI_MAKEMASK(L_EHCI_SUSPEND_DEVICE_ADDRESS, \
	S_EHCI_SUSPEND_DEVICE_ADDRESS)
#define V_EHCI_SUSPEND_DEVICE_ADDRESS(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_SUSPEND_DEVICE_ADDRESS)
#define G_EHCI_SUSPEND_DEVICE_ADDRESS(x) \
	_EHCI_GETVALUE(x, S_EHCI_SUSPEND_DEVICE_ADDRESS, \
	M_EHCI_SUSPEND_DEVICE_ADDRESS)

#define S_EHCI_L1_SUSPEND_STATUS		(23)
#define L_EHCI_L1_SUSPEND_STATUS		(2)
#define M_EHCI_L1_SUSPEND_STATUS \
	_EHCI_MAKEMASK(L_EHCI_L1_SUSPEND_STATUS, S_EHCI_L1_SUSPEND_STATUS)
#define V_EHCI_L1_SUSPEND_STATUS(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_L1_SUSPEND_STATUS)
#define G_EHCI_L1_SUSPEND_STATUS(x) \
	_EHCI_GETVALUE(x, S_EHCI_L1_SUSPEND_STATUS, M_EHCI_L1_SUSPEND_STATUS)

#define S_EHCI_WAKE_ON_OVER_CURRENT_ENABLE	(22)
#define L_EHCI_WAKE_ON_OVER_CURRENT_ENABLE	(1)
#define M_EHCI_WAKE_ON_OVER_CURRENT_ENABLE \
	_EHCI_MAKEMASK(L_EHCI_WAKE_ON_OVER_CURRENT_ENABLE, \
	 S_EHCI_WAKE_ON_OVER_CURRENT_ENABLE)
#define V_EHCI_WAKE_ON_OVER_CURRENT_ENABLE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_WAKE_ON_OVER_CURRENT_ENABLE)
#define G_EHCI_WAKE_ON_OVER_CURRENT_ENABLE(x) \
	_EHCI_GETVALUE(x, S_EHCI_WAKE_ON_OVER_CURRENT_ENABLE, \
	 M_EHCI_WAKE_ON_OVER_CURRENT_ENABLE)

#define S_EHCI_WAKE_ON_DISCONNECT_ENABLE	(21)
#define L_EHCI_WAKE_ON_DISCONNECT_ENABLE	(1)
#define M_EHCI_WAKE_ON_DISCONNECT_ENABLE \
	_EHCI_MAKEMASK(L_EHCI_WAKE_ON_DISCONNECT_ENABLE, \
	S_EHCI_WAKE_ON_DISCONNECT_ENABLE)
#define V_EHCI_WAKE_ON_DISCONNECT_ENABLE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_WAKE_ON_DISCONNECT_ENABLE)
#define G_EHCI_WAKE_ON_DISCONNECT_ENABLE(x) \
	_EHCI_GETVALUE(x, S_EHCI_WAKE_ON_DISCONNECT_ENABLE, \
	M_EHCI_WAKE_ON_DISCONNECT_ENABLE)

#define S_EHCI_WAKE_ON_CONNECT_ENABLE	(20)
#define L_EHCI_WAKE_ON_CONNECT_ENABLE	(1)
#define M_EHCI_WAKE_ON_CONNECT_ENABLE \
	_EHCI_MAKEMASK(L_EHCI_WAKE_ON_CONNECT_ENABLE, \
	S_EHCI_WAKE_ON_CONNECT_ENABLE)
#define V_EHCI_WAKE_ON_CONNECT_ENABLE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_WAKE_ON_CONNECT_ENABLE)
#define G_EHCI_WAKE_ON_CONNECT_ENABLE(x) \
	_EHCI_GETVALUE(x, S_EHCI_WAKE_ON_CONNECT_ENABLE, \
	M_EHCI_WAKE_ON_CONNECT_ENABLE)

#define S_EHCI_PORT_TEST_CONTROL	(16)
#define L_EHCI_PORT_TEST_CONTROL	(4)
#define M_EHCI_PORT_TEST_CONTROL \
	_EHCI_MAKEMASK(L_EHCI_PORT_TEST_CONTROL, S_EHCI_PORT_TEST_CONTROL)
#define V_EHCI_PORT_TEST_CONTROL(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_PORT_TEST_CONTROL)
#define G_EHCI_PORT_TEST_CONTROL(x) \
	_EHCI_GETVALUE(x, S_EHCI_PORT_TEST_CONTROL, M_EHCI_PORT_TEST_CONTROL)

#define S_EHCI_PORT_INDICATOR_CONTROL	(14)
#define L_EHCI_PORT_INDICATOR_CONTROL	(2)
#define M_EHCI_PORT_INDICATOR_CONTROL	\
	_EHCI_MAKEMASK(L_EHCI_PORT_INDICATOR_CONTROL, \
	S_EHCI_PORT_INDICATOR_CONTROL)
#define V_EHCI_PORT_INDICATOR_CONTROL(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_PORT_INDICATOR_CONTROL)
#define G_EHCI_PORT_INDICATOR_CONTROL(x) \
	_EHCI_GETVALUE(x, S_EHCI_PORT_INDICATOR_CONTROL, \
	M_EHCI_PORT_INDICATOR_CONTROL)

#define S_EHCI_PORT_OWNER	(13)
#define L_EHCI_PORT_OWNER	(1)
#define M_EHCI_PORT_OWNER \
	_EHCI_MAKEMASK(L_EHCI_PORT_OWNER, S_EHCI_PORT_OWNER)
#define V_EHCI_PORT_OWNER(x)	\
	_EHCI_MAKEVALUE(x, S_EHCI_PORT_OWNER)
#define G_EHCI_PORT_OWNER(x) \
	_EHCI_GETVALUE(x, S_EHCI_PORT_OWNER, M_EHCI_PORT_OWNER)

#define S_EHCI_PORT_POWER	(12)
#define L_EHCI_PORT_POWER	(1)
#define M_EHCI_PORT_POWER \
	_EHCI_MAKEMASK(L_EHCI_PORT_POWER, S_EHCI_PORT_POWER)
#define V_EHCI_PORT_POWER(x)	\
	_EHCI_MAKEVALUE(x, S_EHCI_PORT_POWER)
#define G_EHCI_PORT_POWER(x) \
	_EHCI_GETVALUE(x, S_EHCI_PORT_POWER, M_EHCI_PORT_POWER)

#define S_EHCI_LINE_STATUS	(10)
#define L_EHCI_LINE_STATUS	(2)
#define M_EHCI_LINE_STATUS	\
	_EHCI_MAKEMASK(L_EHCI_LINE_STATUS, S_EHCI_LINE_STATUS)
#define V_EHCI_LINE_STATUS(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_LINE_STATUS)
#define G_EHCI_LINE_STATUS(x) \
	_EHCI_GETVALUE(x, S_EHCI_LINE_STATUS, M_EHCI_LINE_STATUS)

#define S_EHCI_SUSPEND_L1	(9)
#define L_EHCI_SUSPEND_L1	(1)
#define M_EHCI_SUSPEND_L1 \
	_EHCI_MAKEMASK(L_EHCI_SUSPEND_L1, S_EHCI_SUSPEND_L1)
#define V_EHCI_SUSPEND_L1(x)	\
	_EHCI_MAKEVALUE(x, S_EHCI_SUSPEND_L1)
#define G_EHCI_SUSPEND_L1(x) \
	_EHCI_GETVALUE(x, S_EHCI_SUSPEND_L1, M_EHCI_SUSPEND_L1)

#define S_EHCI_PORT_RESET	(8)
#define L_EHCI_PORT_RESET	(1)
#define M_EHCI_PORT_RESET \
	_EHCI_MAKEMASK(L_EHCI_PORT_RESET, S_EHCI_PORT_RESET)
#define V_EHCI_PORT_RESET(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_PORT_RESET)
#define G_EHCI_PORT_RESET(x) \
	_EHCI_GETVALUE(x, S_EHCI_PORT_RESET, M_EHCI_PORT_RESET)

#define S_EHCI_SUSPEND	(7)
#define L_EHCI_SUSPEND	(1)
#define M_EHCI_SUSPEND	_EHCI_MAKEMASK(L_EHCI_SUSPEND, S_EHCI_SUSPEND)
#define V_EHCI_SUSPEND(x)	\
	_EHCI_MAKEVALUE(x, S_EHCI_SUSPEND)
#define G_EHCI_SUSPEND(x) \
	_EHCI_GETVALUE(x, S_EHCI_SUSPEND, M_EHCI_SUSPEND)

#define S_EHCI_FORCE_PORT_RESUME	(6)
#define L_EHCI_FORCE_PORT_RESUME	(1)
#define M_EHCI_FORCE_PORT_RESUME \
	_EHCI_MAKEMASK(L_EHCI_FORCE_PORT_RESUME, S_EHCI_FORCE_PORT_RESUME)
#define V_EHCI_FORCE_PORT_RESUME(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_FORCE_PORT_RESUME)
#define G_EHCI_FORCE_PORT_RESUME(x) \
	_EHCI_GETVALUE(x, S_EHCI_FORCE_PORT_RESUME, M_EHCI_FORCE_PORT_RESUME)

#define S_EHCI_OVER_CURRENT_CHANGE	(5)
#define L_EHCI_OVER_CURRENT_CHANGE	(1)
#define M_EHCI_OVER_CURRENT_CHANGE \
	_EHCI_MAKEMASK(L_EHCI_OVER_CURRENT_CHANGE, \
	S_EHCI_OVER_CURRENT_CHANGE)
#define V_EHCI_OVER_CURRENT_CHANGE(x)	\
	_EHCI_MAKEVALUE(x, S_EHCI_OVER_CURRENT_CHANGE)
#define G_EHCI_OVER_CURRENT_CHANGE(x) \
	_EHCI_GETVALUE(x, S_EHCI_OVER_CURRENT_CHANGE, \
	 M_EHCI_OVER_CURRENT_CHANGE)

#define S_EHCI_OVER_CURRENT_ACTIVE		(4)
#define L_EHCI_OVER_CURRENT_ACTIVE		(1)
#define M_EHCI_OVER_CURRENT_ACTIVE \
	_EHCI_MAKEMASK(L_EHCI_OVER_CURRENT_ACTIVE, S_EHCI_OVER_CURRENT_ACTIVE)
#define V_EHCI_OVER_CURRENT_ACTIVE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_OVER_CURRENT_ACTIVE)
#define G_EHCI_OVER_CURRENT_ACTIVE(x) \
	_EHCI_GETVALUE(x, S_EHCI_OVER_CURRENT_ACTIVE, \
	M_EHCI_OVER_CURRENT_ACTIVE)

#define S_EHCI_PORT_ENABLE_DISABLE_CHANGE	(3)
#define L_EHCI_PORT_ENABLE_DISABLE_CHANGE	(1)
#define M_EHCI_PORT_ENABLE_DISABLE_CHANGE \
	_EHCI_MAKEMASK(L_EHCI_PORT_ENABLE_DISABLE_CHANGE, \
	S_EHCI_PORT_ENABLE_DISABLE_CHANGE)
#define V_EHCI_PORT_ENABLE_DISABLE_CHANGE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_PORT_ENABLE_DISABLE_CHANGE)
#define G_EHCI_PORT_ENABLE_DISABLE_CHANGE(x) \
	_EHCI_GETVALUE(x, S_EHCI_PORT_ENABLE_DISABLE_CHANGE, \
	M_EHCI_PORT_ENABLE_DISABLE_CHANGE)

#define S_EHCI_PORT_ENABLE_DISABLE		(2)
#define L_EHCI_PORT_ENABLE_DISABLE		(1)
#define M_EHCI_PORT_ENABLE_DISABLE \
	_EHCI_MAKEMASK(L_EHCI_PORT_ENABLE_DISABLE, \
	S_EHCI_PORT_ENABLE_DISABLE)
#define V_EHCI_PORT_ENABLE_DISABLE(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_PORT_ENABLE_DISABLE)
#define G_EHCI_PORT_ENABLE_DISABLE(x) \
	_EHCI_GETVALUE(x, S_EHCI_PORT_ENABLE_DISABLE, \
	M_EHCI_PORT_ENABLE_DISABLE)

#define S_EHCI_CONNECT_STATUS_CHANGE	(1)
#define L_EHCI_CONNECT_STATUS_CHANGE	(1)
#define M_EHCI_CONNECT_STATUS_CHANGE \
	_EHCI_MAKEMASK(L_EHCI_CONNECT_STATUS_CHANGE, \
	S_EHCI_CONNECT_STATUS_CHANGE)
#define V_EHCI_CONNECT_STATUS_CHANGE(x)	\
	_EHCI_MAKEVALUE(x, S_EHCI_CONNECT_STATUS_CHANGE)
#define G_EHCI_CONNECT_STATUS_CHANGE(x) \
	_EHCI_GETVALUE(x, S_EHCI_CONNECT_STATUS_CHANGE, \
	M_EHCI_CONNECT_STATUS_CHANGE)

#define S_EHCI_CONNECT_STATUS_STATUS	(0)
#define L_EHCI_CONNECT_STATUS_STATUS	(1)
#define M_EHCI_CONNECT_STATUS_STATUS \
	_EHCI_MAKEMASK(L_EHCI_CONNECT_STATUS_STATUS, \
	S_EHCI_CONNECT_STATUS_STATUS)
#define V_EHCI_CONNECT_STATUS_STATUS(x) \
	_EHCI_MAKEVALUE(x, S_EHCI_CONNECT_STATUS_STATUS)
#define G_EHCI_CONNECT_STATUS_STATUS(x) \
	_EHCI_GETVALUE(x, S_EHCI_CONNECT_STATUS_STATUS, \
	M_EHCI_CONNECT_STATUS_STATUS)

/*Capability length */
#define S_EHCI_VER_LEN_CAPLEN		0
#define M_EHCI_VER_LEN_CAPLEN	\
	_EHCI_MAKEMASK(8, S_EHCI_VER_LEN_CAPLEN)
#define V_EHCI_VER_LEN_CAPLEN(x)	\
	_EHCI_MAKEVALUE(x, S_EHCI_VER_LEN_CAPLEN)
#define G_EHCI_VER_LEN_CAPLEN(x) \
	_EHCI_GETVALUE(x, S_EHCI_VER_LEN_CAPLEN, M_EHCI_VER_LEN_CAPLEN)
#define SET_EHCI_VER_LEN_CAPLEN(reg, x) \
	(reg = ((reg & ~(M_EHCI_VER_LEN_CAPLEN)) | V_EHCI_VER_LEN_CAPLEN(x)))
#define GET_EHCI_VER_LEN_CAPLEN(reg)	(G_EHCI_VER_LEN_CAPLEN(reg))

/*HCS Params Number of ports */
#define S_EHCI_HCSPRMS_NPORTS		   0
#define M_EHCI_HCSPRMS_NPORTS	\
	_EHCI_MAKEMASK(4, S_EHCI_HCSPRMS_NPORTS)
#define V_EHCI_HCSPRMS_NPORTS(x)		\
	_EHCI_MAKEVALUE(x, S_EHCI_HCSPRMS_NPORTS)
#define G_EHCI_HCSPRMS_NPORTS(x)		\
	_EHCI_GETVALUE(x, S_EHCI_HCSPRMS_NPORTS, M_EHCI_HCSPRMS_NPORTS)
#define SET_EHCI_HCSPRMS_NPORTS(reg, x) \
	(reg = ((reg & ~(M_EHCI_HCSPRMS_NPORTS)) | V_EHCI_HCSPRMS_NPORTS(x)))
#define GET_EHCI_HCSPRMS_NPORTS(reg)	(G_EHCI_HCSPRMS_NPORTS(reg))

/*HCS Params Port Power Control */
#define S_EHCI_HCSPRMS_PPC		  4
#define M_EHCI_HCSPRMS_PPC	\
	_EHCI_MAKEMASK(1, S_EHCI_HCSPRMS_PPC)
#define V_EHCI_HCSPRMS_PPC(x)		   \
	_EHCI_MAKEVALUE(x, S_EHCI_HCSPRMS_PPC)
#define G_EHCI_HCSPRMS_PPC(x)		   \
	_EHCI_GETVALUE(x, S_EHCI_HCSPRMS_PPC, M_EHCI_HCSPRMS_PPC)
#define SET_EHCI_HCSPRMS_PPC(reg, x)	\
	(reg = ((reg & ~(M_EHCI_HCSPRMS_PPC)) | V_EHCI_HCSPRMS_PPC(x)))
#define GET_EHCI_HCSPRMS_PPC(reg)	   (G_EHCI_HCSPRMS_PPC(reg))

/*USBCMD Interrupt on Async Advance Doorbell */
#define S_EHCI_USBCMD_INTAAD		6
#define M_EHCI_USBCMD_INTAAD	\
	_EHCI_MAKEMASK(1, S_EHCI_USBCMD_INTAAD)
#define V_EHCI_USBCMD_INTAAD(x)		 \
	_EHCI_MAKEVALUE(x, S_EHCI_USBCMD_INTAAD)
#define G_EHCI_USBCMD_INTAAD(x)		 \
	_EHCI_GETVALUE(x, S_EHCI_USBCMD_INTAAD, M_EHCI_USBCMD_INTAAD)
#define SET_EHCI_USBCMD_INTAAD(reg, x)  \
	(reg = ((reg & ~(M_EHCI_USBCMD_INTAAD)) | V_EHCI_USBCMD_INTAAD(x)))
#define GET_EHCI_USBCMD_INTAAD(reg)	 (G_EHCI_USBCMD_INTAAD(reg))

/*USBCMD Async Schedule Enable */
#define S_EHCI_USBCMD_ASYSE		5
#define M_EHCI_USBCMD_ASYSE		\
	_EHCI_MAKEMASK(1, S_EHCI_USBCMD_ASYSE)
#define V_EHCI_USBCMD_ASYSE(x)		  \
	_EHCI_MAKEVALUE(x, S_EHCI_USBCMD_ASYSE)
#define G_EHCI_USBCMD_ASYSE(x)		  \
	_EHCI_GETVALUE(x, S_EHCI_USBCMD_ASYSE, M_EHCI_USBCMD_ASYSE)
#define SET_EHCI_USBCMD_ASYSE(reg, x)   \
	(reg = ((reg & ~(M_EHCI_USBCMD_ASYSE)) | V_EHCI_USBCMD_ASYSE(x)))
#define GET_EHCI_USBCMD_ASYSE(reg)	  (G_EHCI_USBCMD_ASYSE(reg))

/*USBCMD Periodic Schedule Enable */
#define S_EHCI_USBCMD_PERSE		4
#define M_EHCI_USBCMD_PERSE		\
	_EHCI_MAKEMASK(1, S_EHCI_USBCMD_PERSE)
#define V_EHCI_USBCMD_PERSE(x)		  \
	_EHCI_MAKEVALUE(x, S_EHCI_USBCMD_PERSE)
#define G_EHCI_USBCMD_PERSE(x)		  \
	_EHCI_GETVALUE(x, S_EHCI_USBCMD_PERSE, M_EHCI_USBCMD_PERSE)
#define SET_EHCI_USBCMD_PERSE(reg, x)   \
	(reg = ((reg & ~(M_EHCI_USBCMD_PERSE)) | V_EHCI_USBCMD_PERSE(x)))
#define GET_EHCI_USBCMD_PERSE(reg)	  (G_EHCI_USBCMD_PERSE(reg))

/*USBCMD Controller Reset */
#define S_EHCI_USBCMD_HCR		1
#define M_EHCI_USBCMD_HCR		\
	_EHCI_MAKEMASK(1, S_EHCI_USBCMD_HCR)
#define V_EHCI_USBCMD_HCR(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_USBCMD_HCR)
#define G_EHCI_USBCMD_HCR(x)			\
	_EHCI_GETVALUE(x, S_EHCI_USBCMD_HCR, M_EHCI_USBCMD_HCR)
#define SET_EHCI_USBCMD_HCR(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_USBCMD_HCR)) | V_EHCI_USBCMD_HCR(x)))
#define GET_EHCI_USBCMD_HCR(reg)		(G_EHCI_USBCMD_HCR(reg))

/*USBCMD Run/Stop */
#define S_EHCI_USBCMD_RS	0
#define M_EHCI_USBCMD_RS	_EHCI_MAKEMASK(1, S_EHCI_USBCMD_RS)
#define V_EHCI_USBCMD_RS(x)			 \
	_EHCI_MAKEVALUE(x, S_EHCI_USBCMD_RS)
#define G_EHCI_USBCMD_RS(x)			 \
	_EHCI_GETVALUE(x, S_EHCI_USBCMD_RS, M_EHCI_USBCMD_RS)
#define SET_EHCI_USBCMD_RS(reg, x)	  \
	(reg = ((reg & ~(M_EHCI_USBCMD_RS)) | V_EHCI_USBCMD_RS(x)))
#define GET_EHCI_USBCMD_RS(reg)		 (G_EHCI_USBCMD_RS(reg))

/*USBSTS Async Schedule Status */
#define S_EHCI_USBSTS_ASYCSS	15
#define M_EHCI_USBSTS_ASYCSS	_EHCI_MAKEMASK(1, S_EHCI_USBSTS_ASYCSS)
#define V_EHCI_USBSTS_ASYCSS(x)		 \
	_EHCI_MAKEVALUE(x, S_EHCI_USBSTS_ASYCSS)
#define G_EHCI_USBSTS_ASYCSS(x)		 \
	_EHCI_GETVALUE(x, S_EHCI_USBSTS_ASYCSS, M_EHCI_USBSTS_ASYCSS)
#define SET_EHCI_USBSTS_ASYCSS(reg, x)  \
	(reg = ((reg & ~(M_EHCI_USBSTS_ASYCSS)) | V_EHCI_USBSTS_ASYCSS(x)))
#define GET_EHCI_USBSTS_ASYCSS(reg)	 (G_EHCI_USBSTS_ASYCSS(reg))

/*USBSTS Periodic Schedule Status */
#define S_EHCI_USBSTS_PSS	14
#define M_EHCI_USBSTS_PSS	_EHCI_MAKEMASK(1, S_EHCI_USBSTS_PSS)
#define V_EHCI_USBSTS_PSS(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_USBSTS_PSS)
#define G_EHCI_USBSTS_PSS(x)			\
	_EHCI_GETVALUE(x, S_EHCI_USBSTS_PSS, M_EHCI_USBSTS_PSS)
#define SET_EHCI_USBSTS_PSS(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_USBSTS_PSS)) | V_EHCI_USBSTS_PSS(x)))
#define GET_EHCI_USBSTS_PSS(reg)		(G_EHCI_USBSTS_PSS(reg))

/*USBSTS Reclamation */
#define S_EHCI_USBSTS_R		13
#define M_EHCI_USBSTS_R _EHCI_MAKEMASK(1, S_EHCI_USBSTS_R)
#define V_EHCI_USBSTS_R(x)			 \
	_EHCI_MAKEVALUE(x, S_EHCI_USBSTS_R)
#define G_EHCI_USBSTS_R(x)			 \
	_EHCI_GETVALUE(x, S_EHCI_USBSTS_R, M_EHCI_USBSTS_R)
#define SET_EHCI_USBSTS_R(reg, x)	  \
	(reg = ((reg & ~(M_EHCI_USBSTS_R)) | V_EHCI_USBSTS_R(x)))
#define GET_EHCI_USBSTS_R(reg)		 (G_EHCI_USBSTS_R(reg))

/*USBSTS Host Controller Halted */
#define S_EHCI_USBSTS_HCH	12
#define M_EHCI_USBSTS_HCH	_EHCI_MAKEMASK(1, S_EHCI_USBSTS_HCH)
#define V_EHCI_USBSTS_HCH(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_USBSTS_HCH)
#define G_EHCI_USBSTS_HCH(x)			\
	_EHCI_GETVALUE(x, S_EHCI_USBSTS_HCH, M_EHCI_USBSTS_HCH)
#define SET_EHCI_USBSTS_HCH(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_USBSTS_HCH)) | V_EHCI_USBSTS_HCH(x)))
#define GET_EHCI_USBSTS_HCH(reg)		(G_EHCI_USBSTS_HCH(reg))

/*USBSTS Interrupt on Async Advance */
#define S_EHCI_USBSTS_INTASA	5
#define M_EHCI_USBSTS_INTASA	_EHCI_MAKEMASK(1, S_EHCI_USBSTS_INTASA)
#define V_EHCI_USBSTS_INTASA(x)		 \
	_EHCI_MAKEVALUE(x, S_EHCI_USBSTS_INTASA)
#define G_EHCI_USBSTS_INTASA(x)		 \
	_EHCI_GETVALUE(x, S_EHCI_USBSTS_INTASA, M_EHCI_USBSTS_INTASA)
#define SET_EHCI_USBSTS_INTASA(reg, x)  \
	(reg = ((reg & ~(M_EHCI_USBSTS_INTASA)) | V_EHCI_USBSTS_INTASA(x)))
#define GET_EHCI_USBSTS_INTASA(reg)	 (G_EHCI_USBSTS_INTASA(reg))

/*USBSTS Host System Error */
#define S_EHCI_USBSTS_HSE	4
#define M_EHCI_USBSTS_HSE	_EHCI_MAKEMASK(1, S_EHCI_USBSTS_HSE)
#define V_EHCI_USBSTS_HSE(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_USBSTS_HSE)
#define G_EHCI_USBSTS_HSE(x)			\
	_EHCI_GETVALUE(x, S_EHCI_USBSTS_HSE, M_EHCI_USBSTS_HSE)
#define SET_EHCI_USBSTS_HSE(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_USBSTS_HSE)) | V_EHCI_USBSTS_HSE(x)))
#define GET_EHCI_USBSTS_HSE(reg)		(G_EHCI_USBSTS_HSE(reg))

/*USBSTS Frame List Rollover */
#define S_EHCI_USBSTS_FLR	3
#define M_EHCI_USBSTS_FLR	_EHCI_MAKEMASK(1, S_EHCI_USBSTS_FLR)
#define V_EHCI_USBSTS_FLR(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_USBSTS_FLR)
#define G_EHCI_USBSTS_FLR(x)			\
	_EHCI_GETVALUE(x, S_EHCI_USBSTS_FLR, M_EHCI_USBSTS_FLR)
#define SET_EHCI_USBSTS_FLR(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_USBSTS_FLR)) | V_EHCI_USBSTS_FLR(x)))
#define GET_EHCI_USBSTS_FLR(reg)		(G_EHCI_USBSTS_FLR(reg))

/*USBSTS Port Change Detect */
#define S_EHCI_USBSTS_PCD	2
#define M_EHCI_USBSTS_PCD	_EHCI_MAKEMASK(1, S_EHCI_USBSTS_PCD)
#define V_EHCI_USBSTS_PCD(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_USBSTS_PCD)
#define G_EHCI_USBSTS_PCD(x)			\
	_EHCI_GETVALUE(x, S_EHCI_USBSTS_PCD, M_EHCI_USBSTS_PCD)
#define SET_EHCI_USBSTS_PCD(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_USBSTS_PCD)) | V_EHCI_USBSTS_PCD(x)))
#define GET_EHCI_USBSTS_PCD(reg)		(G_EHCI_USBSTS_PCD(reg))

/*USBSTS Error Interrupt */
#define S_EHCI_USBSTS_ERRINT	1
#define M_EHCI_USBSTS_ERRINT	_EHCI_MAKEMASK(1, S_EHCI_USBSTS_ERRINT)
#define V_EHCI_USBSTS_ERRINT(x)		 \
	_EHCI_MAKEVALUE(x, S_EHCI_USBSTS_ERRINT)
#define G_EHCI_USBSTS_ERRINT(x)		 \
	_EHCI_GETVALUE(x, S_EHCI_USBSTS_ERRINT, M_EHCI_USBSTS_ERRINT)
#define SET_EHCI_USBSTS_ERRINT(reg, x)  \
	(reg = ((reg & ~(M_EHCI_USBSTS_ERRINT)) | V_EHCI_USBSTS_ERRINT(x)))
#define GET_EHCI_USBSTS_ERRINT(reg)	 (G_EHCI_USBSTS_ERRINT(reg))

/*USBSTS Interrupt */
#define S_EHCI_USBSTS_INT	0
#define M_EHCI_USBSTS_INT	_EHCI_MAKEMASK(1, S_EHCI_USBSTS_INT)
#define V_EHCI_USBSTS_INT(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_USBSTS_INT)
#define G_EHCI_USBSTS_INT(x)			\
	_EHCI_GETVALUE(x, S_EHCI_USBSTS_INT, M_EHCI_USBSTS_INT)
#define SET_EHCI_USBSTS_INT(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_USBSTS_INT)) | V_EHCI_USBSTS_INT(x)))
#define GET_EHCI_USBSTS_INT(reg)		(G_EHCI_USBSTS_INT(reg))

/*PORTSC Current Connect Status */
#define S_EHCI_PORTSC_CCS	0
#define M_EHCI_PORTSC_CCS	_EHCI_MAKEMASK(1, S_EHCI_PORTSC_CCS)
#define V_EHCI_PORTSC_CCS(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_CCS)
#define G_EHCI_PORTSC_CCS(x)			\
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_CCS, M_EHCI_PORTSC_CCS)
#define SET_EHCI_PORTSC_CCS(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_PORTSC_CCS)) | V_EHCI_PORTSC_CCS(x)))
#define GET_EHCI_PORTSC_CCS(reg)		(G_EHCI_PORTSC_CCS(reg))

/*PORTSC Connect Status Change */
#define S_EHCI_PORTSC_CSC	1
#define M_EHCI_PORTSC_CSC	_EHCI_MAKEMASK(1, S_EHCI_PORTSC_CSC)
#define V_EHCI_PORTSC_CSC(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_CSC)
#define G_EHCI_PORTSC_CSC(x)			\
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_CSC, M_EHCI_PORTSC_CSC)
#define SET_EHCI_PORTSC_CSC(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_PORTSC_CSC)) | V_EHCI_PORTSC_CSC(x)))
#define GET_EHCI_PORTSC_CSC(reg)		(G_EHCI_PORTSC_CSC(reg))

/*PORTSC Port Enabled/Disabled */
#define S_EHCI_PORTSC_PE	2
#define M_EHCI_PORTSC_PE	_EHCI_MAKEMASK(1, S_EHCI_PORTSC_PE)
#define V_EHCI_PORTSC_PE(x)			 \
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_PE)
#define G_EHCI_PORTSC_PE(x)			 \
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_PE, M_EHCI_PORTSC_PE)
#define SET_EHCI_PORTSC_PE(reg, x)	  \
	(reg = ((reg & ~(M_EHCI_PORTSC_PE)) | V_EHCI_PORTSC_PE(x)))
#define GET_EHCI_PORTSC_PE(reg)		 (G_EHCI_PORTSC_PE(reg))

/*PORTSC Port Enabled/Disabled Change */
#define S_EHCI_PORTSC_PEC	3
#define M_EHCI_PORTSC_PEC	_EHCI_MAKEMASK(1, S_EHCI_PORTSC_PEC)
#define V_EHCI_PORTSC_PEC(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_PEC)
#define G_EHCI_PORTSC_PEC(x)			\
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_PEC, M_EHCI_PORTSC_PEC)
#define SET_EHCI_PORTSC_PEC(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_PORTSC_PEC)) | V_EHCI_PORTSC_PEC(x)))
#define GET_EHCI_PORTSC_PEC(reg)		(G_EHCI_PORTSC_PEC(reg))

/*PORTSC Over Current Active */
#define S_EHCI_PORTSC_OCA	4
#define M_EHCI_PORTSC_OCA	_EHCI_MAKEMASK(1, S_EHCI_PORTSC_OCA)
#define V_EHCI_PORTSC_OCA(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_OCA)
#define G_EHCI_PORTSC_OCA(x)			\
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_OCA, M_EHCI_PORTSC_OCA)
#define SET_EHCI_PORTSC_OCA(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_PORTSC_OCA)) | V_EHCI_PORTSC_OCA(x)))
#define GET_EHCI_PORTSC_OCA(reg)		(G_EHCI_PORTSC_OCA(reg))

/*PORTSC Over Current Change */
#define S_EHCI_PORTSC_OCC	5
#define M_EHCI_PORTSC_OCC	_EHCI_MAKEMASK(1, S_EHCI_PORTSC_OCC)
#define V_EHCI_PORTSC_OCC(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_OCC)
#define G_EHCI_PORTSC_OCC(x)			\
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_OCC, M_EHCI_PORTSC_OCC)
#define SET_EHCI_PORTSC_OCC(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_PORTSC_OCC)) | V_EHCI_PORTSC_OCC(x)))
#define GET_EHCI_PORTSC_OCC(reg)		(G_EHCI_PORTSC_OCC(reg))

/*PORTSC Force Port Resume */
#define S_EHCI_PORTSC_FPW	6
#define M_EHCI_PORTSC_FPW	_EHCI_MAKEMASK(1, S_EHCI_PORTSC_FPW)
#define V_EHCI_PORTSC_FPW(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_FPW)
#define G_EHCI_PORTSC_FPW(x)			\
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_FPW, M_EHCI_PORTSC_FPW)
#define SET_EHCI_PORTSC_FPW(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_PORTSC_FPW)) | V_EHCI_PORTSC_FPW(x)))
#define GET_EHCI_PORTSC_FPW(reg)		(G_EHCI_PORTSC_FPW(reg))

/*PORTSC Suspend */
#define S_EHCI_PORTSC_S		7
#define M_EHCI_PORTSC_S		_EHCI_MAKEMASK(1, S_EHCI_PORTSC_S)
#define V_EHCI_PORTSC_S(x)			  \
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_S)
#define G_EHCI_PORTSC_S(x)			  \
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_S, M_EHCI_PORTSC_S)
#define SET_EHCI_PORTSC_S(reg, x)	   \
	(reg = ((reg & ~(M_EHCI_PORTSC_S)) | V_EHCI_PORTSC_S(x)))
#define GET_EHCI_PORTSC_S(reg)		  (G_EHCI_PORTSC_S(reg))

/*PORTSC Port Reset */
#define S_EHCI_PORTSC_PR	8
#define M_EHCI_PORTSC_PR	_EHCI_MAKEMASK(1, S_EHCI_PORTSC_PR)
#define V_EHCI_PORTSC_PR(x)			 \
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_PR)
#define G_EHCI_PORTSC_PR(x)			 \
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_PR, M_EHCI_PORTSC_PR)
#define SET_EHCI_PORTSC_PR(reg, x)	  \
	(reg = ((reg & ~(M_EHCI_PORTSC_PR)) | V_EHCI_PORTSC_PR(x)))
#define GET_EHCI_PORTSC_PR(reg)		 (G_EHCI_PORTSC_PR(reg))

/*PORTSC Line Status */
#define S_EHCI_PORTSC_LS	10
#define M_EHCI_PORTSC_LS	_EHCI_MAKEMASK(2, S_EHCI_PORTSC_LS)
#define V_EHCI_PORTSC_LS(x)			 \
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_LS)
#define G_EHCI_PORTSC_LS(x)			 \
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_LS, M_EHCI_PORTSC_LS)
#define SET_EHCI_PORTSC_LS(reg, x)	  \
	(reg = ((reg & ~(M_EHCI_PORTSC_LS)) | V_EHCI_PORTSC_LS(x)))
#define GET_EHCI_PORTSC_LS(reg)		 (G_EHCI_PORTSC_LS(reg))

/*PORTSC Port Power */
#define S_EHCI_PORTSC_PP	12
#define M_EHCI_PORTSC_PP	_EHCI_MAKEMASK(1, S_EHCI_PORTSC_PP)
#define V_EHCI_PORTSC_PP(x)			 \
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_PP)
#define G_EHCI_PORTSC_PP(x)			 \
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_PP, M_EHCI_PORTSC_PP)
#define SET_EHCI_PORTSC_PP(reg, x)	  \
	(reg = ((reg & ~(M_EHCI_PORTSC_PP)) | V_EHCI_PORTSC_PP(x)))
#define GET_EHCI_PORTSC_PP(reg)		 (G_EHCI_PORTSC_PP(reg))

/*PORTSC Port Owner */
#define S_EHCI_PORTSC_PO	13
#define M_EHCI_PORTSC_PO_	EHCI_MAKEMASK(1, S_EHCI_PORTSC_PO)
#define V_EHCI_PORTSC_PO(x)			 \
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_PO)
#define G_EHCI_PORTSC_PO(x)			 \
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_PO, M_EHCI_PORTSC_PO)
#define SET_EHCI_PORTSC_PO(reg, x)	  \
	(reg = ((reg & ~(M_EHCI_PORTSC_PO)) | V_EHCI_PORTSC_PO(x)))
#define GET_EHCI_PORTSC_PO(reg)		 (G_EHCI_PORTSC_PO(reg))

/*PORTSC Port Indicator Control */
#define S_EHCI_PORTSC_PIC	14
#define M_EHCI_PORTSC_PIC	_EHCI_MAKEMASK(2, S_EHCI_PORTSC_PIC)
#define V_EHCI_PORTSC_PIC(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_PIC)
#define G_EHCI_PORTSC_PIC(x)			\
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_PIC, M_EHCI_PORTSC_PIC)
#define SET_EHCI_PORTSC_PIC(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_PORTSC_PIC)) | V_EHCI_PORTSC_PIC(x)))
#define GET_EHCI_PORTSC_PIC(reg)		(G_EHCI_PORTSC_PIC(reg))

/*PORTSC Port Test Control */
#define S_EHCI_PORTSC_PTC	16
#define M_EHCI_PORTSC_PTC	_EHCI_MAKEMASK(4, S_EHCI_PORTSC_PTC)
#define V_EHCI_PORTSC_PTC(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_PTC)
#define G_EHCI_PORTSC_PTC(x)			\
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_PTC, M_EHCI_PORTSC_PTC)
#define SET_EHCI_PORTSC_PTC(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_PORTSC_PTC)) | V_EHCI_PORTSC_PTC(x)))
#define GET_EHCI_PORTSC_PTC(reg)		(G_EHCI_PORTSC_PTC(reg))

/*PORTSC Wake on Connect Enable */
#define S_EHCI_PORTSC_WCE	20
#define M_EHCI_PORTSC_WCE	_EHCI_MAKEMASK(1, S_EHCI_PORTSC_WCE)
#define V_EHCI_PORTSC_WCE(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_WCE)
#define G_EHCI_PORTSC_WCE(x)			\
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_WCE, M_EHCI_PORTSC_WCE)
#define SET_EHCI_PORTSC_WCE(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_PORTSC_WCE)) | V_EHCI_PORTSC_WCE(x)))
#define GET_EHCI_PORTSC_WCE(reg)		(G_EHCI_PORTSC_WCE(reg))

/*PORTSC Wake on Disconnect Enable */
#define S_EHCI_PORTSC_WDE	21
#define M_EHCI_PORTSC_WDE	_EHCI_MAKEMASK(1, S_EHCI_PORTSC_WDE)
#define V_EHCI_PORTSC_WDE(x)			\
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_WDE)
#define G_EHCI_PORTSC_WDE(x)			\
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_WDE, M_EHCI_PORTSC_WDE)
#define SET_EHCI_PORTSC_WDE(reg, x)	 \
	(reg = ((reg & ~(M_EHCI_PORTSC_WDE)) | V_EHCI_PORTSC_WDE(x)))
#define GET_EHCI_PORTSC_WDE(reg)		(G_EHCI_PORTSC_WDE(reg))

/*PORTSC Wake on Over Current Enable */
#define S_EHCI_PORTSC_WOCE	22
#define M_EHCI_PORTSC_WOCE	_EHCI_MAKEMASK(1, S_EHCI_PORTSC_WOCE)
#define V_EHCI_PORTSC_WOCE(x)		   \
	_EHCI_MAKEVALUE(x, S_EHCI_PORTSC_WOCE)
#define G_EHCI_PORTSC_WOCE(x)		   \
	_EHCI_GETVALUE(x, S_EHCI_PORTSC_WOCE, M_EHCI_PORTSC_WOCE)
#define SET_EHCI_PORTSC_WOCE(reg, x)	\
	(reg = ((reg & ~(M_EHCI_PORTSC_WOCE)) | V_EHCI_PORTSC_WOCE(x)))
#define GET_EHCI_PORTSC_WOCE(reg)	   (G_EHCI_PORTSC_WOCE(reg))

/*CONFIGFLAG Config flag */
#define S_EHCI_CONFIGFLAG_CF	0
#define M_EHCI_CONFIGFLAG_CF	_EHCI_MAKEMASK(1, S_EHCI_CONFIGFLAG_CF)
#define V_EHCI_CONFIGFLAG_CF(x)		 \
	_EHCI_MAKEVALUE(x, S_EHCI_CONFIGFLAG_CF)
#define G_EHCI_CONFIGFLAG_CF(x)		 \
	_EHCI_GETVALUE(x, S_EHCI_CONFIGFLAG_CF, M_EHCI_CONFIGFLAG_CF)
#define SET_EHCI_CONFIGFLAG_CF(reg, x)  \
	(reg = ((reg & ~(M_EHCI_CONFIGFLAG_CF)) | V_EHCI_CONFIGFLAG_CF(x)))
#define GET_EHCI_CONFIGFLAG_CF(reg)	 (G_EHCI_CONFIGFLAG_CF(reg))

/*Bit field definition for register USBCMD */
#define EHCI_USBCMD_RS				0x00000001UL
#define EHCI_USBCMD_HCRESET			0x00000002UL
#define EHCI_USBCMD_FrameListSize		0x0000000CUL
#define EHCI_USBCMD_PeriodScheduleEnable	0x00000010UL
#define EHCI_USBCMD_AsynScheduleEnable		0x00000020UL
#define EHCI_USBCMD_AsyncAdvanceDoorbell	0x00000040UL
#define EHCI_USBCMD_LightReset			0x00000080UL
#define EHCI_USBCMD_AsyncScheduleParkCount	0x00000300UL
#define EHCI_USBCMD_AsyncScheduleParkEnable	0x00000800UL
#define EHCI_USBCMD_InterruptThresholdControl	0x00FF0000UL

/*Bit field definition for register USBSTS */
#define EHCI_USBSTS_UsbInt			0x00000001UL
#define EHCI_USBSTS_UsbErrorInt			0x00000002UL
#define EHCI_USBSTS_PortChangeDetect		0x00000004UL
#define EHCI_USBSTS_FrameListRollover		0x00000008UL
#define EHCI_USBSTS_HostSystemError		0x00000010UL
#define EHCI_USBSTS_IntAsyncAdvance		0x00000020UL
#define EHCI_USBSTS_HCHalted			0x00001000UL
#define EHCI_USBSTS_Reclamation			0x00002000UL
#define EHCI_USBSTS_PeriodScheduleStatus	0x00004000UL
#define EHCI_USBSTS_AsyncScheduleStatus		0x00008000UL

/*Bit field definition for register USBINTR */
#define EHCI_USBINTR_UsbIntEnable		0x00000001UL
#define EHCI_USBINTR_UsbErroIntEnable		0x00000002UL
#define EHCI_USBINTR_PortChangeIntEnable	0x00000004UL
#define EHCI_USBINTR_FrameListRolloverEnable	0x00000008UL
#define EHCI_USBINTR_HostSystemErrorEnable	0x00000010UL
#define EHCI_USBINTR_IntAsyncAdvanceEnable	0x00000020UL

/*Bit field definition for register PortSC */
#define EHCI_PORTSC_CurrentConnectStatus	0x00000001UL
#define EHCI_PORTSC_ConnectStatusChange		0x00000002UL
#define EHCI_PORTSC_PortEnabled			0x00000004UL
#define EHCI_PORTSC_PortEnableChange		0x00000008UL
#define EHCI_PORTSC_OvercurrentActive		0x00000010UL
#define EHCI_PORTSC_OvercurrentChange		0x00000020UL
#define EHCI_PORTSC_ForcePortResume		0x00000040UL
#define EHCI_PORTSC_Suspend			0x00000080UL
#define EHCI_PORTSC_PortReset			0x00000100UL
#define EHCI_PORTSC_LineStatus			0x00000C00UL
#define EHCI_PORTSC_PortPower			0x00001000UL
#define EHCI_PORTSC_PortOwner			0x00002000UL
#define EHCI_PORTSC_PortIndicatorControl	0x0000C000UL
#define EHCI_PORTSC_PortTestControl		0x000F0000UL
#define EHCI_PORTSC_WakeonConnectEnable		0x00100000UL
#define EHCI_PORTSC_WakeonDisconnectEnable	0x00200000UL
#define EHCI_PORTSC_WakeonOvercurrentEnable	0x00400000UL

typedef struct ehci_reg_s {
	u32_t hccapbase;
	u32_t hcsparams;
	u32_t hccparams;
	 REG8_RSVD(0x0c, 0x10);
	u32_t usbcmd;
	u32_t usbsts;
	u32_t usbintr;
	u32_t frindex;
	u32_t ctrldssegment;
	u32_t periodiclistbase;
	u32_t asynclistaddr;
	 REG8_RSVD(0x2c, 0x50);
	u32_t configflag;
	u32_t portsc_0;
	u32_t portsc_1;
	u32_t portsc_2;
	 REG8_RSVD(0x60, 0x90);
	u32_t insnreg00;
	u32_t insnreg01;
	u32_t insnreg02;
	u32_t insnreg03;
	u32_t insnreg04;
	u32_t insnreg05;
	u32_t insnreg06;
	u32_t insnreg07;
	u32_t insnreg08;
} ehci_reg_t;

/*
 *  EHCI specified data structure
 */

/*PID code */
#define EHCI_PID_CODE_OUT	(0)
#define EHCI_PID_CODE_IN	(1)
#define EHCI_PID_CODE_SETUP	(2)
#define EHCI_PID_CODE_RSVD	(3)

/*status */
#define EHCI_STATUS_ACTIVE	(0x80)
#define EHCI_STATUS_HALTED	(0x40)
#define EHCI_STATUS_DATA_BUF_ERR (0x20)
#define EHCI_STATUS_BABBLE_DET	(0x10)
#define EHCI_STATUS_XAC_ERR	(0x08)
#define EHCI_STATUS_MISSED_UFRAME	(0x04)
#define EHCI_STATUS_SPLIT_X_STATE	(0x02)
#define EHCI_STATUS_PING_STATE		(0x01)

/*  Link Pointer Yype (Typ) */
#define EHCI_LP_TYPE_ITD	(0)
#define EHCI_LP_TYPE_QH		(1)
#define EHCI_LP_TYPE_SITD	(2)
#define EHCI_LP_TYPE_FSTN	(3)

/*  Endpoint Speed (EPS) */
#define EHCI_ESP_FS  (0)
#define EHCI_ESP_LS  (1)
#define EHCI_ESP_HS  (2)

/*Figure 3-2 */
typedef union ehci_Linkptr_s {
	u32_t LP;
	struct {
		u32_t T:1;
		u32_t Typ:2;
		u32_t Res:2;
	};

} ehci_flist_t, *ehci_flist_p, ehci_Linkptr_t, *ehci_Linkptr_p;

/*Figure 3-4 */
typedef struct ehci_iTD_s {
	/*---------- Word 1 ----------*/
	ehci_Linkptr_t nextLinkPointer;

	/*---------- Word 2-9 ----------*/
	struct {
		volatile u32_t Offset:12;
		volatile u32_t PG:3;
		u32_t ioc:1;

		volatile u32_t Length:12;
	/*-- status [31:28] --*/
		volatile u32_t XactError:1;
		volatile u32_t Babble:1;
		volatile u32_t BufferError:1;
		volatile u32_t Active:1;
	} Transaction[8];

	/*---------- Word 10 - 15 ----------*/
	u32_t Buffer_Pointer[7];
} ehci_iTD_t, *ehci_iTD_p;

/*Not supported */
/*Figure 3-5 */
typedef struct ehci_siTD_s {
	/*---------- Word 1 ----------*/
	ehci_Linkptr_t nextLinkPointer;

	/*---------- Word 2 ----------*/
	u32_t DeviceAddr:7;
	u32_t Reserved2:1;
	u32_t EndPt:4;
	u32_t Reserved2_1:4;
	u32_t HubAddr:7;
	u32_t Reserved2_2:1;
	u32_t PortNumber:7;
	u32_t IO:1;

	/*---------- Word 3 ----------*/
	u32_t uFrameSmask:8;
	u32_t uFrameCmask:8;
	u32_t Reserved3:8;

	/*---------- Word 4 ----------*/
	volatile u32_t Status:8;
	volatile u32_t uFrameCprogmask:8;
	volatile u32_t TotalBytesTranfer:10;
	volatile u32_t Reserved4:4;
	volatile u32_t P:1;
	u32_t ioc:1;
	/*---------- Word 5 ----------*/
	volatile u32_t CurrentOffset:12;
	u32_t buffer_pointer_pg0:20;

	/*---------- Word 6 ----------*/
	volatile u32_t Tcount:3;
	volatile u32_t TP:2;
	u32_t Reserved6:7;
	u32_t buffer_pointer_pg1:20;
	/*---------- Word 7 ----------*/
	u32_t T:1;
	u32_t Reserved7:4;
	u32_t back_pointer:27;
} ehci_siTD_t, *ehci_siTD_p;

/*Figure 3-6 */
typedef volatile struct ehci_qTD_s {
	u32_t next_qTD_T:1;
	u32_t next_qTD_RESVD0:4;
	u32_t next_qTD_ptr:27;

	u32_t altn_next_qTD_T:1;
	u32_t altn_next_qTD_RESVD0:4;
	u32_t altn_next_qTD_ptr:27;

	volatile u32_t status:8;
	u32_t pid_code:2;

	volatile u32_t cerr:2;
	volatile u32_t c_page:3;
	u32_t ioc:1;

	volatile u32_t total_bytes:15;
	volatile u32_t dt:1;

	u32_t buffer_pointer_0:32;
	u32_t buffer_pointer_1:32;
	u32_t buffer_pointer_2:32;
	u32_t buffer_pointer_3:32;
	u32_t buffer_pointer_4:32;
} ehci_qTD_t, *ehci_qTD_p;

/*Figure 3-7 */
typedef struct ehci_qH_s {
	/*---------- Word 0 ----------*/
	/*TODO replace with ehci_flist_t */
	u32_t T:1;
	u32_t Typ:2;
	u32_t RES0:2;
	u32_t QH_HLP:27;

	/*---------- Word 1 ----------*/
	u32_t device_address:7;
	u32_t I:1;
	u32_t EndPt:4;
	u32_t EPS:2;
	u32_t dtc:1;
	u32_t H:1;
	u32_t max_pkt_len:11;
	u32_t C:1;
	u32_t RL:4;

	/*---------- Word 2 ----------*/
	u32_t uFrameSMask:8;
	u32_t uFrameCMask:8;
	u32_t Hub_Addr:7;
	u32_t Port_Number:7;
	u32_t Mult:2;

	/*---------- Word 3 ----------*/
	volatile u32_t RES3:5;
	volatile u32_t Current_qTD_ptr:27;

	/*ehci_qTD_t	current_qTD_cache; */
	/*---------- Word 4 ----------*/
	volatile u32_t next_qTD_ptrT:1;
	volatile u32_t RES4:4;
	volatile u32_t next_qTD_ptr:27;

	/*---------- Word 5 ----------*/
	volatile u32_t altn_next_qTD_ptrT:1;
	volatile u32_t NakCnt:4;
	volatile u32_t altn_next_qTD_ptr:27;

	/*---------- Word 6 ----------*/
	volatile u32_t status:8;
	volatile u32_t pid_code:2;
	volatile u32_t cerr:2;
	volatile u32_t c_page:3;
	volatile u32_t ioc:1;
	volatile u32_t total_bytes:15;
	volatile u32_t dt:1;

	/*---------- Word 7 ----------*/
	volatile u32_t Current_Offset:12;
	volatile u32_t buffer_pointer_0:20;

	/*---------- Word 8 ----------*/
	volatile u32_t Cprog_Mask:8;
	volatile u32_t RES8:4;
	volatile u32_t buffer_pointer_1:20;

	/*---------- Word 9 ----------*/
	volatile u32_t Frame_Tag:5;
	volatile u32_t S_bytes:7;
	volatile u32_t buffer_pointer_2:20;

	/*---------- Word 10 ----------*/
	volatile u32_t RES10:12;
	volatile u32_t buffer_pointer_3:20;

	/*---------- Word 11 ----------*/
	volatile u32_t RES11:12;
	volatile u32_t buffer_pointer_4:20;
} __aligned(32) ehci_qH_t, *ehci_qH_p;

typedef struct ehci_endpoint_s {
	ehci_qH_p qH;
	ehci_flist_t *flist;
	int ep_flags;
	int ep_mps;
	int ep_num;
	int ep_dev_addr;
} ehci_endpoint_t, *ehci_endpoint_p;

typedef struct ehci_softc_s {
	ehci_endpoint_p ept[EHCI_MAX_NUM_EPT_PER_PORT];
	/*used for CTRL/BULK and INT */
	/*  FIXME: only allow one request for now */
	struct usbreq *qReq;
	/*  FIXME: only allow one request for now */
	ehci_qTD_p qTD[EHCI_MAX_NUM_TD_PER_XFER];
	u32_t usb_Reqtype;
	volatile u32_t *ehci_regs;
	struct usbbus *ehci_bus;
	u32_t no_itdalloc;
	/*Emulated Root Hub specific */
	int ehci_rh_newaddr;	/*Address to be set on next status update */
	int ehci_rh_addr;	/*address of root hub */
	int ehci_rh_conf;	/*current configuration # */
	u8_t ehci_rh_buf[128];	/*buffer to hold hub responses */
	u8_t *ehci_rh_ptr;	/*pointer into buffer */
	int ehci_rh_len;	/*remaining bytes to transfer */
	u32_t ehci_ndp;	/*number of ports */
	ehci_endpoint_t *ept_pool;
	ehci_qTD_t *qtd_pool;
	ehci_qH_t *qh_pool;
	ehci_flist_t *fl_pool;
	ehci_iTD_t *itd_pool;
} ehci_softc_t, *ehci_softc_p;

extern volatile ehci_reg_t *ehci_reg;
extern const struct usb_hcd ehci_driver;
void ehci_reg_dump(volatile ehci_reg_t *ehci_reg);

#define EHCI_QTDPOOL_SIZE  32
#define EHCI_QHPOOL_SIZE  32
#define EHCI_EPTPOOL_SIZE  128

#endif /*  _EHCI_H_ */
