===========================================
| Lynx static PM mode description         |
===========================================
Definition:
    RUN250        = M3 250MHz                          ; console @ 115200
    RUN200        = M3 200MHz                          ; console @ 115200
    RUN100        = M3 100MHz                          ; console @ 38400
    RUN25         = M3 25MHz                           ; console @ 19200
    SLEEP         = M3 WFI                             ; all data remained
    DEEPSLEEP     = PD_SYS power down                  ; after wakeup, CRMU data remained, i.e. IDRAM, SCRAM, PERSISTENT_REGs ...
    VERYDEEPSLEEP = All PD power down except PD_BAT    ; after wakeup, all data lost except bbl_ram

How to enter target mode:
    RUN250        : > pm run250
    RUN200        : > pm run200
    RUN100        : > pm run100
    RUN25         : > pm run25
    SLEEP         : > pm sleep
    DEEPSLEEP     : > pm deepsleep
    VERYDEEPSLEEP : > pm verydeepsleep

How to wakeup system:
    For sleep/deepsleep/verydeepsleep, there are different wakeup sources.
                     AON_WAKEUP/SW10     RTC       TAMPER   VDS_WAKEUP/SW2
    SLEEP         :  Y                   Y         Y        N
    DEEPSLEEP     :  Y                   Y         Y        N
    VERYDEEPSLEEP :  N                   N         Y        Y

    AON_WAKEUP:
        SW11.1 must be set ON to enable SW10 button.

    RTC:
        Default RTC wakeup time is 5 seconds, can be changed by MPROC_PM_DEFAULT_RTC_WAKEUP_TIME.

    TAMPER:
        Easily touch the Y3 osc to trigger an low frequency tamper event.
        Set SW4.2 ON to trigger an P1 tamper event.
        Set SW3.2 ON to trigger an N1 tamper event.

Misc:
    1. A0 doesn't support VERYDEEPSLEEP, so run "pm verydeepsleep" on A0 board has no effect.
    2. Fix BBL access bug on A0: power down -> remove coin cell -> wait 10 seconds -> power on -> insert coin cell -> and SW7.4 set ON.

===========================================
| How to build M0 codes independently     |
===========================================
    M0 codes could be compiled with linaro toolchain or ARM toolchain.
    The bin size generated by linaro toolchain is about doubled than ARM toolchain.

    - To build M0 codes with linaro gcc toolchain(defalt):
        1. Add linaro toolchain path (arm-none-eabi-gcc) to env PATH, i.e.
            export PATH=/opt/toolchain/gcc-linaro-arm-none-eabi-4.8-2014.04_linux/bin:$PATH
        2. make M0TOOL=GCC M0
           OR
           make M0

    - To build M0 codes with ARM toolchain:
        1. Add ARM toolchain path (armcc) to env PATH, i.e.
            export PATH=/tools/bin:$PATH
        2. Add iproc LDK toolchain path (arm-linux-gcc) to env PATH, i.e.
            export CROSS_COMPILE=arm-linux-
            export PATH=/projects/ntsw-iproc-sw/iproc_tools/usr/bin:$PATH
        3. make M0TOOL=ARMCC M0


